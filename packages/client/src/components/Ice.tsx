import {
  AccumulativeShadows,
  Center,
  MeshTransmissionMaterial,
  RandomizedLight,
  useGLTF,
} from "@react-three/drei";
import { memo } from "react";

import * as THREE from "three";

export const Ice = memo(() => {
  return (
    <group position={[0, 0, 0]}>
      <Center top>
        <GelatinousCube />
      </Center>
      <AccumulativeShadows
        temporal
        frames={100}
        alphaTest={0.9}
        color="blue"
        colorBlend={1}
        opacity={0.8}
        scale={20}
      >
        <RandomizedLight
          radius={10}
          ambient={0.5}
          intensity={1}
          position={[2.5, 8, -2.5]}
          bias={0.001}
        />
      </AccumulativeShadows>
    </group>
  );
});

Ice.displayName = "Ice";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 gelatinous_cube.glb --transform --simplify
Author: glenatron (https://sketchfab.com/glenatron)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/gelatinous-cube-e08385238f4d4b59b012233a9fbdca21
Title: Gelatinous Cube
*/

const GelatinousCube = () => {
  const config = {
    meshPhysicalMaterial: false,
    transmissionSampler: false,
    backside: true,
    samples: 10,
    resolution: 2048,
    transmission: 1,
    roughness: 0.0,
    thickness: 3.5,
    ior: 1.5,
    min: 1,
    chromaticAberration: 0.06,
    anisotropy: 0.1,
    distortion: 0.0,
    distortionScale: 0.3,
    temporalDistortion: 0.5,
    clearcoat: 1,
    attenuationDistance: 0.5,
    attenuationColor: "#ffffff",
    color: "lightblue",
    bg: "#839681",
  };

  const { nodes, materials } = useGLTF("/gelatinous_cube-transformed.glb");

  return (
    <group dispose={null}>
      <mesh
        geometry={nodes.cube1.geometry}
        position={[-0.56, 0.38, -0.11]}
        // position-y={-1}
        scale-x={10}
        scale-z={10}
        scale-y={0.2}
      >
        <MeshTransmissionMaterial
          background={new THREE.Color(config.bg)}
          {...config}
        />
      </mesh>
      <mesh
        castShadow
        renderOrder={-100}
        geometry={nodes.cube2.geometry}
        material={materials.cube_mat}
        material-side={THREE.FrontSide}
        position={[-0.56, 0.38, -0.11]}
        // position-y={-1}
        scale-x={10}
        scale-z={10}
        scale-y={0.2}
      />
      {/* <mesh geometry={nodes.bubbles.geometry} material={materials.cube_bubbles_mat} position={[-0.56, 0.38, -0.11]} />
        <group position={[-0.56, 0.38, -0.41]}>
          <mesh geometry={nodes.arrows.geometry} material={materials.weapons_mat} />
          <mesh geometry={nodes.skeleton_1.geometry} material={materials.skele_mat} />
          <mesh geometry={nodes.skeleton_2.geometry} material={materials.weapons_mat} material-side={THREE.FrontSide} />
        </group> */}
    </group>
  );
};
